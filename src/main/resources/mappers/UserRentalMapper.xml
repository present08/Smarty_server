<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.green.smarty.mapper.UserRentalMapper">
    <!-- 대여 등록 -->
    <insert id="insertRental" parameterType="com.green.smarty.vo.RentalVO">
        INSERT INTO rental (
            rental_id,
            user_id,
            product_id,
            rental_status,
            rental_date,
            count
        ) VALUES (
            #{rental_id},
            #{user_id},
            #{product_id},
            #{rental_status},
            #{rental_date},
            #{count}
        )
    </insert>

    <!-- 모든 대여 조회 -->
    <select id="getAllRentals" resultType="com.green.smarty.dto.RentalDTO">
        SELECT
            rental_id,
            user_id,
            product_id,
            rental_status,
            rental_date,
            return_date,
            count
        FROM
            rental;
    </select>

    <!-- 특정 대여 조회 -->
    <select id="getRentalById" parameterType="String" resultType="com.green.smarty.dto.RentalDTO">
        SELECT
        rental_id,
        user_id,
        product_id,
        rental_status,
        rental_date,
        return_date,
        count
        FROM rental
        WHERE rental_id = #{rental_id};
    </select>

    <select id="getAvailableQuantity" parameterType="string" resultType="int">
        SELECT p.stock - COALESCE(SUM(psl.change_quantity), 0) AS available_quantity
        FROM product p
        LEFT JOIN product_status ps ON p.product_id = ps.product_id
        LEFT JOIN product_status_log psl ON ps.status_id = psl.status_id
        WHERE p.product_id = #{product_id};
    </select>

    <!-- 대여 상태 변경 -->
    <update id="updateChangedStatus" parameterType="map">
        UPDATE product_status
        SET current_status = FALSE, updated_at = CURRENT_TIMESTAMP
        WHERE status_id = #{status_id};
    </update>

    <!-- product_status 테이블의 current_status 업데이트 -->
    <update id="updateCurrentStatus" parameterType="string">
        UPDATE product_status ps
        SET ps.current_status = CASE
        WHEN (
        SELECT COALESCE(SUM(change_quantity), 0)
        FROM product_status_log psl
        WHERE psl.status_id = ps.status_id
        ) >= (
        SELECT stock
        FROM product
        WHERE product_id = ps.product_id
        ) THEN FALSE
        ELSE TRUE
        END
        WHERE ps.product_id = #{product_id};
    </update>

    <!-- 대여 로그 추가 -->
    <insert id="insertRentalLogWithRentalId" parameterType="map">
        INSERT INTO product_status_log (
            rental_id,
            status_id,
            changed_status,
            change_quantity,
            created_at
        ) VALUES (
            #{rental_id},
            #{status_id},
            #{changed_status},
            #{change_quantity},
        CURRENT_TIMESTAMP
        );
    </insert>

    <!-- 대여 로그 삭제 -->
    <delete id="deleteRentalLog" parameterType="map">
        DELETE FROM product_status_log
        WHERE status_id = #{status_id}
        AND rental_id = #{rental_id}
    </delete>

    <!-- 대여된 상태 복구 -->
    <update id="restoreToAvailable" parameterType="string">
        UPDATE product_status
        SET current_status = TRUE, updated_at = CURRENT_TIMESTAMP
        WHERE status_id = #{status_id};
    </update>

    <!-- 특정 사용자 대여 목록 조회 -->
    <select id="getUserRentalListData" parameterType="String" resultType="com.green.smarty.dto.ProductRentalUserDTO">
        SELECT
        u.user_id,
        u.user_name,
        f.facility_name,
        p.product_id,
        p.product_name,
        p.price,
        p.size,
        r.rental_date,
        r.return_date,
        r.rental_status,
        r.rental_id,
        r.count
        FROM rental r
        INNER JOIN user u ON u.user_id = r.user_id
        INNER JOIN product p ON p.product_id = r.product_id
        INNER JOIN facility f ON f.facility_id = p.facility_id
        WHERE u.user_id = #{user_id};
    </select>

    <!-- 반납 처리 -->
    <update id="returnRental" parameterType="com.green.smarty.vo.RentalVO">
        UPDATE rental
        SET rental_status = #{rental_status},
            return_date = #{return_date}
        WHERE rental_id = #{rental_id};
    </update>

    <!-- 결제 상태 업데이트 -->
    <update id="updatePaymentStatus" parameterType="com.green.smarty.dto.PaymentDTO">
        UPDATE payment
        SET payment_status = #{payment_status}
        WHERE payment_id = (SELECT payment_id FROM rental WHERE user_id = #{user_id});
    </update>

    <!-- 날짜 기반 최대 Rental ID 조회 -->
    <select id="getMaxRentalIdForDate" parameterType="string" resultType="string">
        SELECT MAX(rental_id)
        FROM rental
        WHERE rental_id LIKE CONCAT('R_', #{datePrefix}, '%');
    </select>

    <!-- 반납하지 않은 모든 대여 물품 조회 -->
    <select id="getOverdueRentals" resultType="com.green.smarty.dto.RentalDTO">
        SELECT * FROM rental
        WHERE rental_status = 1;
    </select>

    <!-- 사용자 ID 기반 이메일 조회 -->
    <select id="getEmailByUserId" resultType="String" parameterType="String">
        SELECT u.email
        FROM rental r
        INNER JOIN user u ON r.user_id = u.user_id
        WHERE r.user_id = #{userId}
    </select>

<!-- product_name 가져오기-->
    <select id="getProductNameByProductId" parameterType="String" resultType="String">
        SELECT p.product_name
        FROM rental r
        INNER JOIN product p ON r.product_id = p.product_id
        WHERE r.product_id = #{productId}
    </select>

    <select id="getRentedStatusIds" parameterType="map" resultType="string">
        SELECT psl.status_id
        FROM product_status_log psl
        INNER JOIN product_status ps ON psl.status_id = ps.status_id
        WHERE ps.product_id = #{product_id}
        AND psl.rental_id = #{rental_id}
        AND psl.changed_status = '대여 중'
        LIMIT #{count};
    </select>

    <!-- 특정 상태의 총 감소 수량 계산 -->
    <select id="getTotalUnavailableQuantity" parameterType="string" resultType="int">
        SELECT IFNULL(SUM(change_quantity), 0)
        FROM product_status_log psl
        INNER JOIN product_status ps ON psl.status_id = ps.status_id
        WHERE ps.product_id = #{product_id}
        AND psl.changed_status IN ('대여 중', '손상', '수리 필요', '재구매 필요');
    </select>

    <select id="getAvailableStatusIds" parameterType="map" resultType="string">
        SELECT ps.status_id
        FROM product_status ps
        WHERE ps.product_id = #{product_id}
        AND ps.current_status = TRUE
        LIMIT #{count};
    </select>

</mapper>
